EC2 : Elastic Compute Cloud : 
		CPU, Memory, Storage, Network, Applications/softwares
		

Purchase a server : 1M.. (32CPU, 128GB RAM, 6TB HDD, Intel Xeon) --> Quotation --> Dell/hp/lenovo.. Dell --> Pricing --> Release PO with 100% Advance.. 3-4 Delivery time --> NBD --> Service Tag --> Mount it --> OS Installation --> Application installation -->  UAT --> Prod			5-10 Weeks

Server Rack
Network Rack
Cooling system
UPS

++ 10M : 
-- 10k : 

Vertical Scaling : | 
Horizontal Scaling :  --> | | | 

Capital Expendeture : Investing first.. ROI
Operational Expendature : Every month operations.. 

__________________________________________________________________

EC2 : Pay-as-you-go : 
Pay-as-you-grow : 


Instance : 


On-Demand EC2 Instance : Unpredictable workload, No stable usecases... Pricing : /hr, /sec... 
--
Reserved Instances : Stable / predictable workloads for specific durations i.e; 1 Yr/3 Yrs.. Commitment with AWS.. 

16vCPU, 32 RAM.. 3 Years.. 

	Standard RI : We cannot change the configuration.. 
	Convertable RI : We can change the config.. 
	Scheduled RI : Persistant/ repeatable durations.. 

Pricing : Full Upfront : Pay 100% while purchasing.. 
	  Partial upfront : Pay (30-50%) some amount now.. Remaining monthly basis..
	  No Upfront : Pay monthly basis.. 
--
Spot Instances : If we have Flexible start/stop times for our server.. We need to bid our price against aws price.. We can get High config server at low cost.. 

1$/hr --> 0.50$/Hr We got our server --> 1 Hr 35 Min --> Price not increased and , we terminated --> 1 Hr 35 Min we will get cherged for entire duration.. 

If price increased and AWS terminated the instance, We billg et charged for Full Hours, not for the partial hours.. 

--> Pricing History
--> Spot Fleet

_______________________________________________________________________________________

D: 22/04/2020

EC2: 1. Mumbai	2. N.V

Launching an EC2 Instance : 

Step 1: Choose an AMI (Amazon Machine Image)(Template of an OS with required services/applications)

Linux : Amazon Linux, Suse, Redhat, CentoS, KaliLinux.....  
Windows : 2012, 2012R2, 2016, 2019

QuickStart: Brandnew AWS Managed AMIs.
MyAMI : We can CUstomise AMIs.
AWS MarketPlace : Where we can buy appliances from diff Organizations.. 

Step 2: Choose an Instance Type (Selecting Configuration) (vCPU, Memory, Network Perf)

General Purpose : Balanced performance : A1, T2, T3, T3a, M4, M5, M5n
Compute Optimized : CPU :  Best professor performances : C4, C5, C5n
Memory Optimized : RAM : Best RAM perf : R4, R5, R5n/a, X1, X1e
Storage Optimized : Best HDD/SDD Perfor : D2, i3, i3en
GPU Optimized : Best Graphic perf : P2, P3, G3, G4
FPGA : Field Programable gate array : f1
ML ASIC : Application Specific Integrated circuit: inf1

Step 3: Configure Instance Details

Number of instances : 1
Shutdown behavior : Stop/Terminate : STOP
Enable termination protection : YES

Step 4: Add Storage
Window : 30GB
Linix : 8gb / 10gb

Step 5: Add Tags
--> Max we can add 50 Tags/Instance

Step 6: Configure Security Group

Security Group : Firewall at Instance level, We can filter the traffic.. 

0-65535 : Port / Protocols : 
Windows OS : RDP : 3389 : 
Linux OS : SSH : 22 : putty

Source : 0.0.0.0/0, ::/0 --> Opened for everyone
My IP : Picks Currently connected network Public IP 

AWS Keeps --> Public Key		--> lock
AWS Gives --> .pem file (Private Key)	--> Key


Pending --> RUnning --> Stopping --> Stopped
					|
					V
Pending --> RUnning --> Shutdown --> terminate


Task 1 : Launch a windows ec2 instance. Connect --> Change the password for "Administrator". --> Disconnect --> Try to connect using Keypair generated password.. 

Task 2 : Create a new user "Yourname", and provide RDP permissions to get connected to our instance. 

Task 3 : Provide local admins rights/ elivated permissions to newly created user. 

_______________________________________________________________________________________

D: 23/04/2020


EC2 : 750 Hours/Month, t2.micro WIndows.. 1 Month =1 instance..
	750 Hrs/Month, t2.micro Linux instnce..  

Security Grpups are stateful.
We always needs to take care about inbound rules in SG.
ALl outbound traffic allowed by defaultly. (Instance accepts all the traffic)
Changes to SG takes effect immediatly. No need to stop/start/reboot.

Security groups allows the traffic. We cannot deny the traffic.

RDP : 3389
SSH : 22
http: 80
Https : 443
MSSQL : 1433
MySQL : 3306


Can we deny any traffic using SG.? NO

TO upgrade/diwngrade the instance type, We need to stop the instance first. 

EIP : Elastic IP : Dedicated IP address for our AWS account in a specific region. 
(NO FREE TIER ELIGIBILITY)

ENI : Elastic Network Interface : 


Task : Ping your ec2 instance by opening required ports on SG.(ICMP: Echo reply/request)

Task 2 : Launch another ec2 instance, and test the website output from newly launched ec2 instance using privateIP. 

__________________________________________________________________________________

D: 24/04/2020

Root Device types:
1. Instance store : 
	--> Also called as a ephemeral storage. 
	--> We cannot stop/start the instance.
	--> If underlying instance failure happens, we loss all the data.
	--> We do have 3rd party applications to migrate Instance store volumes to EBS 	
		(NetApp)

2. EBS (Elastic Block Storage): 

root volume types: 
	--> General Purpose SSD : gp2
	--> Provisioned IOPS : io1
	--> Magnetic : standard
additional volumes
	--> THroughput optimised HDD : st1
	--> COld HDD : sc1

IOPS : Input and Output operations per second.. 


GP2 : Min 1 GB, 16 TB.. Dev/Test Env, Low latency interactive applications.. Used for lot of transactional worklods..  Max IOPS : 16,000...  1 GB = 3 IOPS, With min of 100, Bustable upto 3000... 

io1 : Min 4 Gb, Max 16 TB.. I/O Intensive NoSQL/ Relational Databases. Latency sensitive transactional workloads.. If you need specific iops count for your application..  Highestb performance SSD..  Max IOPS : 64,000... 1GB = 50 IOPS.
But We can specify our required IOPS count.. 

Magnetic/standard : Min 1 GB, Max 1 TB.. Lowest storage for our instance.. Less freq accessed data.. IOPS N/A.. 


Throughput optimized HDD : MIn 500 GB, Max : 16 TB.. Low cost HDD for Freq, accessed dat for BigData / Warehousing/ log processing applications.. IOPS : 500.. 
THoughput: 500MB/s

Cold HDD : MIn 500 GB, Max : 16 TB.. Lowest cost HDD volume for Less freq accased data.. Data required only fewer scans per day.. IOPS: 250.. THoughput: 250 MB/s


Free :  30 GB of EBS General Purpose (SSD) or Magnetic storage.. 


Delete on Termination : If we Terminate our ec2 instance, THis volume also deletes automatically. (Option selected)

_______________________________________

Snapshot: Backup option for our EBS volumes. 

--> AWS uses S3 platform to store the snapshots  (AWS owned S3 platform)
--> We can automate the Snapshot process using DLM (Data Lifecycle Manager)
--> Snapshots creates in Incremental manner.
--> We required only latest snapshot to restore. 

________________________________________________________________________________

D: 25/04/2020

DLM : Data Lifecycle Manager : Based on Tags.. 

CLoudwatch Events : We can create Snapshots.. : Based on Volume ID.. 

CustomAMI / GoldenAMI : 


1 Instance = Required standards/applications.. --> Create an Image (MyAMI)

50 ec2 instance.. IIS, Internal APplications, Pdf, AV, MSOffice, Putty, CustomWP..


Linux Insatnce :

Windows : Putty, Enable OpenSSH and use Command prompt, Install GIt and use GIt bash, MobaXterm.. 
Linux/Mac: Terminal

SSH : Secure Shell : Port:22.. 


Putty accepts only .ppk format keypair.. 
	--> Either create a keypair with .ppk in aws
	--> Convert the PEM file format to PPK using PuttyGen.. 


ls
ssh -i LinuxKP.pem ec2-user@13.233.178.3


Task: Practice Instance launch, VOlumes, snapshot and GoldenAMI with Windows Isntance
Task 2 : Launch Linux instance get connect to it. 


______________________________________________________________________________________

D: 28/04/2020

Metadata : 

Userdata : We can pass the command while launching the instance. We can automate some tasks by using this Userdata / BSS.

Foe Linux Instance : 
#!/bin/bash
yum install httpd -y
service httpd start
chkconfig httpd on
echo "<h1>This is a BSS Website</h1>" >> /var/www/html/index.html

For Windows Instances: 

<script>
echo System Rebooted at this date and time >> %SystemRoot%\Temp\test.txt
echo %DATE% %TIME% >> %SystemRoot%\Temp\test.txt
</script>
<persist>true</persist>

Executes after every reboot : <persist>true</persist>


Metadata : 
Metadata service version 1 : a Request/response method
Metadata service version 2 : a Session-oriented method

For Linux : curl http://169.254.169.254/latest/meta-data/
Open Browser : http://169.254.169.254/latest/meta-data/
ami-id
ami-launch-index
ami-manifest-path
block-device-mapping/
events/
hibernation/
hostname
identity-credentials/
instance-action
instance-id
instance-type
local-hostname
local-ipv4
mac
metrics/
network/
placement/
profile
public-hostname
public-ipv4
public-keys/
reservation-id
security-groups
services/

________________________________________

Cloudwatch : Service to monitor the resources.. 

Instances : CW have 2 types of monitorings:
--> Basic Monitoring : Interval 5 Min
--> Detailed Monitoring / Enhanced Monitoring : Interval 1 Min

Using CW, We can monitor CPU, Network, Disk, Status checks..  We cannot monitor MEMORY (RAM) utilisation using Defualt metrics.. 

TO monitor Memory on ec2 instance, Install Unified CW agent.. 


Status Checks : 
--> System Status checks.. : Stop/start.. add additional NIC card as a temp fix.. 
--> Instance Status checks.. : Reboot


__________________________________

Vertical Scaling : 
Horizantal Scaling : 


ELB : Elastic Load Balncer : 
--> 1. Classic ELB : TCP, SSL/TLS, Http, Https.. Previous Generation.. 
--> 2. Application ELB : Http, Https.. 
--> 3. Network ELB : TCP, UDP, TLS/SSL


Task : Using userdata make instances as webservers.. (Launch instances in 1a and 1b) COnfigure Classic ELB to deliver the website.
















